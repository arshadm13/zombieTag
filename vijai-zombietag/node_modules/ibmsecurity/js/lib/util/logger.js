/*!
 *  Licensed Materials - Property of IBM
 *  5725-I43 (C) Copyright IBM Corp. 2011, 2014. All Rights Reserved.
 *  US Government Users Restricted Rights - Use, duplication or
 *  disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 *
 *  IBM Mobile Application Security (MAS) v0.0.1
 */
'use strict';

var winston = require('winston'),
    _       = require("underscore"),
    fs      = require('fs'),
    Console = winston.transports.Console,
    File    = winston.transports.File;

// Determine log configuration
var logjson = process.cwd() + "/config/log.json";
if (!fs.existsSync(logjson)) {
    console.log('Log configuration file could be defined in:\n', logjson);
    logjson = __dirname + "/../../log.json";
    console.log('Looking for log.json in: ', logjson);//TODO
    if (!fs.existsSync(logjson)) {
        console.log('Error: Default file for log configuration not found:\n', logjson);
    }
}

var config = require(logjson);
var transports = [new Console(config.std.console)];
var exceptionHandlers = [new Console(config.err.console)];

// Can update log.json "std" property with the following "file" property
// to enable the creation of a separate log file.  This file is NOT pruned,
// so use this judiciously.  Set the level appropirately (winston logger)
//        "file": {
//            "level": "silly",
//            "timestamp": true,
//            "filename": "/logs/mas_stdout.log",
//            "json": true
//       }
if (config.std.file) {
    config.std.file.filename = process.cwd()+'/'+config.std.file.filename;
    transports.push(new File(config.std.file));
}

// Can update log.json "err" property with the following "file" property
// to enable the creation of a separate log file.  This file is NOT pruned,
// so use this judiciously.  Set the level appropirately (winston logger)
//        "file": {
//            "level": "silly",
//            "timestamp": true,
//            "filename": "/logs/mas_stderr.log",
//            "json": true
//       }
if (config.err.file) {
    config.err.file.filename = process.cwd()+'/'+config.err.file.filename;
    exceptionHandlers.push(new File(config.err.file));
}

var options = {
    transports: transports,
    exceptionHandlers: exceptionHandlers,
    exitOnError: false
};

var LoggerClazz = winston.Logger;
process.setMaxListeners(20); // There are more than 10 js using logger event emitters, set limit to 20 for now. 

LoggerClazz.prototype.withTag = function(tag){
    var inst = new LoggerClazz(options);
    var _log = inst.log;
    inst.log = function() { 
        var args = _.toArray(arguments);
        args[1] = "["+tag+"] "+args[1];
        return _log.apply(inst, args);
    }
    return inst;
}

exports = module.exports = new LoggerClazz(options)