/*!
 *  Licensed Materials - Property of IBM
 *  5725-I43 (C) Copyright IBM Corp. 2011, 2014. All Rights Reserved.
 *  US Government Users Restricted Rights - Use, duplication or
 *  disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 *
 *  IBM Mobile Application Security (MAS)
 */

/*
 * This module implements an express middleware to inspect incoming requests.
 * It uses the $wssc header to identify the protocol, and the $wssn header as
 * the fully qualified host name to redirect to. The $wssc header will be set
 * by the Data Power router that front ends all incoming requests; it's value
 * will be set to the incoming request's protocol scheme. The $wssn header will
 * also be set by the Data Power router, and it's value will be set to the
 * incoming request's fully qualified host name (i.e. mobile.mybluemix.net).
 */

'use strict';

var http = require('http');
var logger = require("./logger").withTag("force-https");

// Public init
// 
// Input:  None
// 
// Returns: express middleware function used to process incoming requests
//
var init = function() {
    logger.debug("force-https initializer");
    return forcehttps;
}

// Private forcehttps
// 
// Examine the incoming request's $wssc and $wssn headers.  If the $wssc header
// is 'http' and the $wssn header has a value, then send a redirect response
// with a URI using the HTTPS protocol + $wssn host + path/query
// 
// Input:
//     node req - The incoming request
//     node res - The outgoing response.  May be updated with redirect status/header
// 
// Returns: true if res was updated with a HTTPS redirect response; false otherwise
//
var forcehttps = function(req, res, next) {
    var METHOD_NAME = "forcehttps";
    logger.debug(METHOD_NAME + " Entry", [req.headers, req.hostname, req.originalUrl, req.protocol], {});

    // Get the $wssc and $wssn headers
    var wssc = req.headers["$wssc"];
    var wssn = req.headers["$wssn"];
    logger.debug(METHOD_NAME + ' $wssc: %s', wssc);
    logger.debug(METHOD_NAME + ' $wssn: %s', wssn);

    // If the $wssc header == 'http' and $wssn = some-value, then redirect this request
    if (wssc != null && wssc != 'undefined') {
    	if (wssc.toLowerCase() == 'http') {
            logger.debug(METHOD_NAME + " Request protocol is http");
            if (wssn != null & wssc != 'undefined') {
            	// Create the redirect URI - using HTTPS + $wssn domain + original url path
            	// Use the original url, not the current request URL as it may have been changed
            	// by other express middleware (see http://expressjs.com/4x/api.html#req.originalUrl)
                var redirUri = "https://" + wssn + req.originalUrl; 
                logger.debug(METHOD_NAME + " Redirecting to secured URI %s", redirUri);
                res.writeHead(301, {'Location' : redirUri});
                res.end();
            }
            else {
            	logger.debug(METHOD_NAME + " WARNING - Request $wssc header was not set; unable to redirect");
            	next();
            }
    	}
    	else {
        	logger.debug(METHOD_NAME + " Request protocol is NOT http; no redirect required");
        	next();
    	}
    }
    else {
    	logger.debug(METHOD_NAME + " Request $wssc header was not set; no redirect required");
    	next();
    }

    logger.debug(METHOD_NAME + " Exit");
}

module.exports = init;
