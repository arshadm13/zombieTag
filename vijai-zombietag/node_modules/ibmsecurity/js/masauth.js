/*!
 *  Licensed Materials - Property of IBM
 *  5725-I43 (C) Copyright IBM Corp. 2011, 2014. All Rights Reserved.
 *  US Government Users Restricted Rights - Use, duplication or
 *  disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 *
 *  IBM Mobile Application Security (MAS) v0.0.1
 */

'use strict';

var httpRequest = require("request"),
    logger      = require("./lib/util/logger").withTag("MAS initialization"),
    Constants   = require("./lib/util/constants"),
    environment = require("./lib/util/environment"),
    forcehttps  = require("./lib/util/force-https")();

function getDomainNameFromVcapServices() {
    var vcapService = JSON.parse(process.env['VCAP_SERVICES']);
    var domainName = '';
    
    Object.keys(vcapService).forEach(function(key) {
      var service = vcapService[key];
      // MAS service name might be MAS, MAS_Dev or MAS_Test.  The latter two
      // represent the service name in the Dev and Test zones.  So, look for
      // "MAS" as the first 3 characters in the service name.
      if (key.indexOf(Constants.MAS_PREFIX) == 0) {
         var aurl = service[0].credentials.admin_url;
         // MAS admin URL is in the format:
         // https://mobile.stage1.ng.bluemix.net/masui/v1?appId=7fc62561-b755-4579-bee5-f4e33f4e2ae0
         var idxAdminUrlPath = aurl.indexOf(Constants.MAMUI_WEB_CONTEXT_NAME)-1;
         var idxFirstDot = aurl.indexOf(".");
         domainName = aurl.substring(idxFirstDot+1, idxAdminUrlPath);
      }
    })
    logger.debug('getDomainNameFromVcapServices() returns: ', domainName);
    return domainName;
}

/**
 * Using VCAP information this method returns the current full host name
 * of the VCAP application running this method.
 * 
 */
function getFullHostName() {
    
    var METHOD_NAME = "getFullHostName";
    var vcapApp = JSON.parse(process.env['VCAP_APPLICATION']);
    
    if(vcapApp) {
        var hostName = vcapApp.uris[0];
        logger.debug(METHOD_NAME + " Host name returned: " + hostName);
        return hostName;
    }
    
    logger.warn(METHOD_NAME + " Null host name returned");
    return null;
}

/**
 * Retrieve the domain name given a fully qualified host name given by VCAP_APPLCIATION.
 * 
 * @return The whole domain name after the first period in a fully qualified host name.  Otherwise return empty string.
 */
function getDomainNameFromVcapApplication() {
    
    var METHOD_NAME = "getDomainNameFromVcapApplication";
    
    var fullHostName = getFullHostName();
    if(fullHostName){
        var idxFirstDot = fullHostName.indexOf('.');
        if (idxFirstDot !== -1) {
            var domainName = fullHostName.substring(idxFirstDot+1);
            logger.debug('Found domain name: ' + domainName);
            return domainName;
        }
    }
    
    logger.warn(CLASS_NAME, METHOD_NAME, "Empty domain is returned.");
    return "";
    
}


/**
 * Return the MAS service domain name.
 * This is accomplished by first obtaining the domain from the MAS service instance
 * defined in the VCAP_SERVICES env variable.  If there is no MAS service instance,
 * then the domain of the current application (from the VCAP_APPLICATION env var)
 * is used.
 * 
 * @return The whole domain name after the first period in a fully qualified host name.  Otherwise return empty string.
 */
function getDomainName() {
    
    var METHOD_NAME = "getDomainName";
    var domainName = "";
    
    var domainName = getDomainNameFromVcapServices();
    if (!domainName) {
        logger.debug("MAS domain not found in VCAP_SERVICES");
        domainName = getDomainNameFromVcapApplication();
    }
    
    logger.debug("Domain: "+domainName);
    return domainName;
    
}

function getInternalMAMUrlServerName() {
    
    var METHOD_NAME = "getInternalMAMUrlServerName";
    
    var mamURL = null;
    var domainName = getDomainName();
    
    // Add MAS host name to MAS domain
    mamURL = Constants.MAMSERVICE_INTERNAL_SUBDOMAIN_NAME + 
            (!domainName ? "" : "." + domainName);
    
    logger.debug("mamURL: " + mamURL);
    return mamURL;
    
}   

function setupRequestAuthHeaders(req) {
    var headers = req.headers;
    var requestAuthHeaders = {};   

    // Set all security related headers into authorization request           
    var appSecret = headers[Constants.HTTP_REQUEST_HEADERS.appSecret] || headers[Constants.HTTP_REQUEST_HEADERS.appSecret.toLowerCase()];
    if (appSecret) {
        requestAuthHeaders[Constants.HTTP_REQUEST_HEADERS.appSecret] = appSecret;
    }

    var clientId = headers[Constants.HTTP_REQUEST_HEADERS.package] || headers[Constants.HTTP_REQUEST_HEADERS.package.toLowerCase()];
    if (clientId) {
        requestAuthHeaders[Constants.HTTP_REQUEST_HEADERS.package] = clientId;
    }
    
    var deviceType = headers[Constants.HTTP_REQUEST_HEADERS.devtype] || headers[Constants.HTTP_REQUEST_HEADERS.devtype.toLowerCase()];
    if (deviceType) {
        requestAuthHeaders[Constants.HTTP_REQUEST_HEADERS.devtype] = deviceType;
    }
    
    var deviceId = headers[Constants.HTTP_REQUEST_HEADERS.devId] || headers[Constants.HTTP_REQUEST_HEADERS.devId.toLowerCase()];
    if (deviceId) {
        requestAuthHeaders[Constants.HTTP_REQUEST_HEADERS.devId] = deviceId;
    }
    
    var deviceModel = headers[Constants.HTTP_REQUEST_HEADERS.devmodel] || headers[Constants.HTTP_REQUEST_HEADERS.devmodel.toLowerCase()];
    if (deviceModel) {
        requestAuthHeaders[Constants.HTTP_REQUEST_HEADERS.devmodel] = deviceModel;
    }
    
    var devicePlatformVersion = headers[Constants.HTTP_REQUEST_HEADERS.devversion] || headers[Constants.HTTP_REQUEST_HEADERS.devversion.toLowerCase()];
    if (devicePlatformVersion) {
        requestAuthHeaders[Constants.HTTP_REQUEST_HEADERS.devversion] = devicePlatformVersion;
    }
    
    var deviceName = headers[Constants.HTTP_REQUEST_HEADERS.devname] || headers[Constants.HTTP_REQUEST_HEADERS.devname.toLowerCase()];
    if (deviceName) {
        requestAuthHeaders[Constants.HTTP_REQUEST_HEADERS.devname] = deviceName;
    }
    
    var authToken = headers[Constants.HTTP_REQUEST_HEADERS.access_token] || headers[Constants.HTTP_REQUEST_HEADERS.access_token.toLowerCase()];
    if (authToken) {
        requestAuthHeaders[Constants.HTTP_REQUEST_HEADERS.access_token] = authToken;
    }

    var authProvider = headers[Constants.HTTP_REQUEST_HEADERS.oauth_provider] || headers[Constants.HTTP_REQUEST_HEADERS.oauth_provider.toLowerCase()];
    if (authProvider) {
        requestAuthHeaders[Constants.HTTP_REQUEST_HEADERS.oauth_provider] = authProvider;
    }
    
    logger.debug('requestAuthHeaders %j', requestAuthHeaders, {});
    return requestAuthHeaders;
}

function postMasServiceRequestValidator(req, res, next) {
	var METHOD = "postMasServiceRequestValidator";
    logger.debug(METHOD + ": Entry");  
    
    // Determine the actual MAS service URL from VCAP
    var appId = environment.getUriAppID(req.path);
    var masHost = getInternalMAMUrlServerName();
    
    // Connection to MAS should be secured
    var masServiceUrl = "https://"+masHost+"/mas/v1/apps/"+appId+"/requests/authorization";
    
    // POST the actual headers for validation
    logger.debug('masServiceUrl', masServiceUrl);
    httpRequest({ method: 'POST', uri: masServiceUrl
        , headers: setupRequestAuthHeaders(req)}, function(error, response, body) {
        	
        if (error) logger.debug(METHOD + ": error = ", error);
        if (response) logger.debug(METHOD + ": response.statusCode = %d", response.statusCode);
        if (body) logger.debug(METHOD + ": body = ", body);
        
        // If request is successfully authorized, pass it along to the next middleware
        if (!error && response && response.statusCode == Constants.HTTP_RESP_CODES.Success) {
            next();
        }
        
        // If the request failed authorization or some other error was encountered
        // set the response status code appropriately.  Also forward along additional
        // information in the response body.
        else {
        	// Set the repsonse status code
            var statuscode;
            if (response) {
                statuscode = response.statusCode;
            } else {
                statuscode = Constants.HTTP_RESP_CODES.InternalError; // Forward status code
            }
            logger.error(METHOD + ': Security check failed with response', statuscode);
            res.status(statuscode); // Forward status code
            
            // Set the response body
            if (error) {
                res.send(error);  // Usually describes network or similar errors
            } else {
                if (body) {
                    res.send(body); // Forward body if exist
                } else {
                    res.send('Error code: ' + statuscode); // body
                }
            }
            res.end();
        }
    });
}

/**
 * Serial chain a set of filters to validate the input one by one.
 * 
 * @class
 * @param {object} options Configuration options.
 *        "requireSSL" - returns express middleware function that only checks for and enforces HTTP
 *        None         - returns express middleware function that performs all MAS security checks
 * @return A middleware aggregation of filters to be triggered in a chain.
 */
function MasSecurity() {
	logger.debug("MasSecurity options: %j", arguments, {});
	
	// If the requireSSL option is specified, return the forcehttps middleware function
	if (arguments.length > 0 && arguments[0].toLowerCase() == Constants.MAS_REQUIRESSL_OPTION) {
		return forcehttps;
	}
	
    return postMasServiceRequestValidator;
}

module.exports = MasSecurity;